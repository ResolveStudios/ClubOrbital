#T#PoiParallaxProperties
[HideInInspector] m_start_parallax (" Parallax Heightmapping--{reference_property:_PoiParallax}", Float) = 0
[HideInInspector][ThryToggle(POI_PARALLAX)]_PoiParallax ("Enable", Float) = 0
[ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_ParallaxUV ("Applies To: ", Int) = 0

[ThryTexture]_Heightmap ("Heightmap--{reference_properties:[_HeightmapPan, _HeightmapUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_HeightmapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_HeightmapUV ("UV", Int) = 0

[ThryTexture]_Heightmask ("Mask--{reference_properties:[_HeightmaskPan, _HeightmaskUV, _HeightmaskInvert]}", 2D) = "white" { }
[HideInInspector][Vector2]_HeightmaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ToggleUI]_HeightmaskInvert ("Invert", Float) = 0
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_HeightmaskUV ("UV", Int) = 0

_HeightStrength ("Strength", Range(0, 0.1)) = 0.02
_HeightOffset ("Offset", Range(-1, 1)) = 0
[IntRange]_HeightSteps ("Steps", Range(0, 20)) = 10
// [ThryToggle]_ParallaxUV0 ("UV0", Float) = 0
// [ThryToggle]_ParallaxUV1 ("UV1", Float) = 0
// [ThryToggle]_ParallaxUV2 ("UV2", Float) = 0
// [ThryToggle]_ParallaxUV3 ("UV3", Float) = 0
// [ThryToggle]_ParallaxPano ("Panosphere", Float) = 0
// [ThryToggle]_ParallaxWorldPos ("World Pos", Float) = 0
// [ThryToggle]_ParallaxPolar ("Polar", Float) = 0
// [ThryToggle]_ParallaxDist ("Distorted UV", Float) = 0

[HideInInspector] m_end_parallax ("Parallax Heightmapping", Float) = 0

#T#PoiParallaxKeywords
#pragma shader_feature_local POI_PARALLAX

#T#PoiParallaxVariables
#ifdef POI_PARALLAX
    Texture2D _Heightmap;
    float4 _Heightmap_ST;
    float2 _HeightmapPan;
    float _HeightmapUV;

    #if defined(PROP_HEIGHTMASK) || !defined(OPTIMIZER_ENABLED)
        Texture2D _Heightmask;
    #endif
    float4 _Heightmask_ST;
    float2 _HeightmaskPan;
    float _HeightmaskUV;
    float _HeightmaskInvert;

    float _ParallaxUV;
    float _HeightStrength;
    float _HeightOffset;
    float _HeightSteps;

    // float _ParallaxUV0;
    // float _ParallaxUV1;
    // float _ParallaxUV2;
    // float _ParallaxUV3;
    // float _ParallaxPano;
    // float _ParallaxWorldPos;
    // float _ParallaxPolar;
    // float _ParallaxDist;
#endif

#T#PoiParallaxFunctions
#ifdef POI_PARALLAX
    float2 ParallaxOffsetMultiStep(float surfaceHeight, float strength, float2 uv, float3 tangentViewDir)
    {
        float2 uvOffset = 0;
        float2 prevUVOffset = 0;
        float stepSize = 1.0 / _HeightSteps;
        float stepHeight = 1;
        float2 uvDelta = tangentViewDir.xy * (stepSize * strength);
        float prevStepHeight = stepHeight;
        float prevSurfaceHeight = surfaceHeight;

        [unroll(20)]
        for (int j = 1; j <= _HeightSteps && stepHeight > surfaceHeight; j++)
        {
            prevUVOffset = uvOffset;
            prevStepHeight = stepHeight;
            prevSurfaceHeight = surfaceHeight;
            uvOffset -= uvDelta;
            stepHeight -= stepSize;
            surfaceHeight = POI2D_SAMPLER_PAN(_Heightmap, _MainTex, poiUV(uv + uvOffset, _Heightmap_ST), _HeightmapPan) + _HeightOffset;
        }

        [unroll(3)]
        for (int k = 0; k < 3; k++)
        {
            uvDelta *= 0.5;
            stepSize *= 0.5;

            if (stepHeight < surfaceHeight)
            {
                uvOffset += uvDelta;
                stepHeight += stepSize;
            }
            else
            {
                uvOffset -= uvDelta;
                stepHeight -= stepSize;
            }
            surfaceHeight = POI2D_SAMPLER_PAN(_Heightmap, _MainTex, poiUV(uv + uvOffset, _Heightmap_ST), _HeightmapPan) + _HeightOffset;
        }
        return uvOffset;
    }
    
    void applyParallax(inout PoiMesh poiMesh, in float3 tangentViewDir)
    {
        half h = POI2D_SAMPLER_PAN(_Heightmap, _linear_repeat, poiUV(poiMesh.uv[_HeightmaskUV], _Heightmap_ST), _HeightmapPan).r + _HeightOffset;
        #if defined(PROP_HEIGHTMASK) || !defined(OPTIMIZER_ENABLED)
            half m = POI2D_SAMPLER_PAN(_Heightmask, _linear_repeat, poiUV(poiMesh.uv[_HeightmaskUV], _Heightmask_ST), _HeightmaskPan).r + _HeightOffset;
        #else
            half m = _HeightOffset;
        #endif
        h = clamp(h, 0, 0.999);
        m = lerp(m, 1 - m, _HeightmaskInvert);
        #if defined(OPTIMIZER_ENABLED)
            poiMesh.uv[_ParallaxUV] += ParallaxOffsetMultiStep(h, _HeightStrength * m, poiMesh.uv[_HeightmapUV], tangentViewDir / tangentViewDir.z);
        #else
            float2 offset = ParallaxOffsetMultiStep(h, _HeightStrength * m, poiMesh.uv[_HeightmapUV], tangentViewDir / tangentViewDir.z);
            if (_ParallaxUV == 0)       poiMesh.uv[0] += offset;
            if (_ParallaxUV == 1)       poiMesh.uv[1] += offset;
            if (_ParallaxUV == 2)       poiMesh.uv[2] += offset;
            if (_ParallaxUV == 3)       poiMesh.uv[3] += offset;
            if (_ParallaxUV == 4)       poiMesh.uv[4] += offset;
            if (_ParallaxUV == 5)       poiMesh.uv[5] += offset;
            if (_ParallaxUV == 6)       poiMesh.uv[6] += offset;
            if (_ParallaxUV == 7)       poiMesh.uv[7] += offset;
        #endif
    }
#endif

#T#PoiParallaxFunctionCalls
#ifdef POI_PARALLAX
    #ifndef POI_PASS_OUTLINE
        applyParallax(poiMesh, i.tangentViewDir);
    #endif
#endif