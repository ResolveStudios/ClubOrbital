#T#PoiShadingProperties
[HideInInspector] m_start_PoiShading (" Shading--{reference_property:_ShadingEnabled}", Float) = 0
[HideInInspector][ThryToggle(VIGNETTE_MASKED)]_ShadingEnabled ("Enable Shading", Float) = 1
[ThryHeaderLabel(Base Pass Shading, 13)]
[Space(4)]
[KeywordEnum(TextureRamp, MathRamp, Wrapped, Skin, ShadeMap, Flat, Realistic, )] _LightingMode ("Lighting Type", Float) = 5
_LightingShadowColor ("Shadow Tint--{condition_showS:(_LightingMode!=4)}", Color) = (1, 1, 1)
[Gradient]_ToonRamp ("Lighting Ramp--{texture:{width:512,height:4,filterMode:Bilinear,wrapMode:Clamp},force_texture_options:true,condition_showS:(_LightingMode==0)}", 2D) = "white" { }
_ShadowOffset ("Ramp Offset--{condition_showS:(_LightingMode==0)}", Range(-1, 1)) = 0
_LightingGradientStart ("Gradient Start--{condition_showS:(_LightingMode==1)}", Range(0, 1)) = 0
_LightingGradientEnd ("Gradient End--{condition_showS:(_LightingMode==1)}", Range(0, 1)) = .5
_LightingGradientStartWrap ("Gradient Start--{condition_showS:(_LightingMode==2)}", Range(0, 1)) = 0
_LightingGradientEndWrap ("Gradient End--{condition_showS:(_LightingMode==2)}", Range(0, 1)) = .5

// Shade Maps
_1st_ShadeColor ("1st ShadeColor--{condition_showS:(_LightingMode==4)}", Color) = (1, 1, 1)
_1st_ShadeMap ("1st ShadeMap--{reference_properties:[_1st_ShadeMapPan, _1st_ShadeMapUV, _Use_1stShadeMapAlpha_As_ShadowMask, _1stShadeMapMask_Inverse],condition_showS:(_LightingMode==4)}", 2D) = "white" { }
[HideInInspector][Vector2]_1st_ShadeMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _1st_ShadeMapUV ("UV", Int) = 0
[HideInInspector][ToggleUI]_Use_1stShadeMapAlpha_As_ShadowMask ("1st ShadeMap.a As ShadowMask", Float) = 0
[HideInInspector][ToggleUI]_1stShadeMapMask_Inverse ("1st ShadeMapMask Inverse", Float) = 0
[ToggleUI] _Use_BaseAs1st ("Use BaseMap as 1st ShadeMap--{condition_showS:(_LightingMode==4)}", Float) = 0
_2nd_ShadeColor ("2nd ShadeColor--{condition_showS:(_LightingMode==4)}", Color) = (1, 1, 1, 1)
_2nd_ShadeMap ("2nd ShadeMap--{reference_properties:[_2nd_ShadeMapPan, _2nd_ShadeMapUV, _Use_2ndShadeMapAlpha_As_ShadowMask, _2ndShadeMapMask_Inverse],condition_showS:(_LightingMode==4)}", 2D) = "white" { }
[HideInInspector][Vector2]_2nd_ShadeMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _2nd_ShadeMapUV ("UV", Int) = 0
[HideInInspector][ToggleUI]_Use_2ndShadeMapAlpha_As_ShadowMask ("2nd ShadeMap.a As ShadowMask", Float) = 0
[HideInInspector][ToggleUI]_2ndShadeMapMask_Inverse ("2nd ShadeMapMask Inverse", Float) = 0
[ToggleUI] _Use_1stAs2nd ("Use 1st ShadeMap as 2nd_ShadeMap--{condition_showS:(_LightingMode==4)}", Float) = 0
_BaseColor_Step ("BaseColor_Step--{condition_showS:(_LightingMode==4)}", Range(0.01, 1)) = 0.5
_BaseShade_Feather ("Base/Shade_Feather--{condition_showS:(_LightingMode==4)}", Range(0.0001, 1)) = 0.0001
_ShadeColor_Step ("ShadeColor_Step--{condition_showS:(_LightingMode==4)}", Range(0, 1)) = 0
_1st2nd_Shades_Feather ("1st/2nd_Shades_Feather--{condition_showS:(_LightingMode==4)}", Range(0.0001, 1)) = 0.0001
[Enum(Replace, 0, Multiply, 1)]_ShadingShadeMapBlendType ("Blend Mode", Int) = 0
//DJ Wrapped
_LightingWrappedWrap ("Wrap--{condition_showS:(_LightingMode==2)}", Range(0, 2)) = 0
_LightingWrappedNormalization ("Normalization--{condition_showS:(_LightingMode==2)}", Range(0, 1)) = 0
// Realistic
_LightingStandardSmoothness ("Smoothness--{condition_showS:(_LightingMode==6)}", Range(0, 1)) = 0
// Skin Shading
_SkinLUT ("LUT--{condition_showS:(_LightingMode==3)}", 2D) = "white" { }
_SssScale ("Scale--{condition_showS:(_LightingMode==3)}", Range(0, 1)) = 1
[HideInInspector]_SssBumpBlur ("Bump Blur--{condition_showS:(_LightingMode==3)}", Range(0, 1)) = 0.7
[HideInInspector][Vector3]_SssTransmissionAbsorption ("Absorption--{condition_showS:(_LightingMode==3)}", Vector) = (-8, -40, -64, 0)
[HideInInspector][Vector3]_SssColorBleedAoWeights ("AO Color Bleed--{condition_showS:(_LightingMode==3)}", Vector) = (0.4, 0.15, 0.13, 0)
// Generic
_ShadowStrength ("Shadow Strength--{condition_showS:(_LightingMode<=3)}", Range(0, 1)) = 1
_LightingIgnoreAmbientColor ("Ignore Ambient Color--{condition_showS:(_LightingMode<=3)}", Range(0, 1)) = 0

// Additive
[Space(15)]
[ThryHeaderLabel(Add Pass Shading, 13)]
[Space(4)]
[Enum(Realistic, 0, Toon, 1, Wrapped soon.jpg, 2)] _LightingAdditiveType ("Lighting Type", Int) = 1
_LightingAdditiveGradientStart ("Gradient Start", Range(0, 1)) = 0
_LightingAdditiveGradientEnd ("Gradient End", Range(0, 1)) = .5
//_LightingAdditiveDetailStrength ("Detail Shadow Strength", Range(0, 1)) = 1 //TODO-implement this
[ToggleUI]_LightingAdditiveLimitIntensity ("Limit Intensity", Float) = 0
_LightingAdditiveMaxIntensity ("Max Intensity--{condition_show:{type:PROPERTY_BOOL,data:_LightingAdditiveLimitIntensity==1}}", Range(0, 10)) = 1

[HideInInspector] m_end_PoiShading ("Shading", Float) = 0


#T#PoiShadingKeywords
#pragma shader_feature VIGNETTE_MASKED
#pragma shader_feature_local _LIGHTINGMODE_TEXTURERAMP _LIGHTINGMODE_MATHRAMP _LIGHTINGMODE_SHADEMAP _LIGHTINGMODE_REALISTIC _LIGHTINGMODE_WRAPPED _LIGHTINGMODE_SKIN _LIGHTINGMODE_FLAT

#T#PoiShadingVariables
// Toon Lighting
UNITY_DECLARE_TEX2D(_ToonRamp);
float _ShadowOffset;
float _ShadowStrength;
float _LightingIgnoreAmbientColor;
// Math Toon Lighting
float _LightingGradientStart;
float _LightingGradientEnd;
float3 _LightingShadowColor;
float _LightingGradientStartWrap;
float _LightingGradientEndWrap;
// ShadeMap Lighting
float3 _1st_ShadeColor;
Texture2D _1st_ShadeMap;
float4 _1st_ShadeMap_ST;
float2 _1st_ShadeMapPan;
float _1st_ShadeMapUV;
float _Use_1stShadeMapAlpha_As_ShadowMask;
float _1stShadeMapMask_Inverse;
float _Use_BaseAs1st;
float3 _2nd_ShadeColor;
Texture2D _2nd_ShadeMap;
float4 _2nd_ShadeMap_ST;
float2 _2nd_ShadeMapPan;
float _2nd_ShadeMapUV;
float _Use_2ndShadeMapAlpha_As_ShadowMask;
float _2ndShadeMapMask_Inverse;
float _Use_1stAs2nd;
float _BaseColor_Step;
float _BaseShade_Feather;
float _ShadeColor_Step;
float _1st2nd_Shades_Feather;
float _ShadingShadeMapBlendType;
// Realistic Lighting
float _LightingStandardSmoothness;
// Skin
sampler2D _SkinLUT;
float _SssScale;
float _SssBumpBlur;
float3 _SssTransmissionAbsorption;
float3 _SssColorBleedAoWeights;
// Additive
float _LightingAdditiveType;
float _LightingAdditiveGradientStart;
float _LightingAdditiveGradientEnd;
float _LightingAdditiveDetailStrength;
float _LightingAdditiveLimitIntensity;
float _LightingAdditiveMaxIntensity;

#T#PoiShadingFunction
#ifdef VIGNETTE_MASKED
	float _LightingWrappedWrap;
	float _LightingWrappedNormalization;

	// Greenâ€™s model with adjustable energy
	// http://blog.stevemcauley.com/2011/12/03/energy-conserving-wrapped-diffuse/
	// Modified for adjustable conservation ratio and over-wrap to directionless
	float RTWrapFunc(in float dt, in float w, in float norm)
	{
		float cw = saturate(w);
		
		float o = (dt + cw) / ((1.0 + cw) * (1.0 + cw * norm));
		float flt = 1.0 - 0.85 * norm;
		if (w > 1.0)
		{
			o = lerp(o, flt, w - 1.0);
		}
		return o;
	}
	float3 GreenWrapSH(float fA) // Greens unoptimized and non-normalized

	{
		float fAs = saturate(fA);
		float4 t = float4(fA + 1, fAs - 1, fA - 2, fAs + 1); // DJL edit: allow wrapping to L0-only at w=2
		return float3(t.x, -t.z * t.x / 3, 0.25 * t.y * t.y * t.w);
	}
	float3 GreenWrapSHOpt(float fW) // optimised and normalized https://blog.selfshadow.com/2012/01/07/righting-wrap-part-2/

	{
		const float4 t0 = float4(0.0, 1.0 / 4.0, -1.0 / 3.0, -1.0 / 2.0);
		const float4 t1 = float4(1.0, 2.0 / 3.0, 1.0 / 4.0, 0.0);
		float3 fWs = float3(fW, fW, saturate(fW)); // DJL edit: allow wrapping to L0-only at w=2
		
		float3 r;
		r.xyz = t0.xxy * fWs + t0.xzw;
		r.xyz = r.xyz * fWs + t1.xyz;
		return r;
	}
	float3 ShadeSH9_wrapped(float3 normal, float wrap)
	{
		float3 x0, x1, x2;
		float3 conv = lerp(GreenWrapSH(wrap), GreenWrapSHOpt(wrap), _LightingWrappedNormalization); // Should try optimizing this...
		conv *= float3(1, 1.5, 4); // Undo pre-applied cosine convolution by using the inverse
		
		// Constant (L0)
		x0 = float3(unity_SHAr.w, unity_SHAg.w, unity_SHAb.w);
		// Remove pre-applied constant part from L(2,0) to apply correct convolution
		float3 L2_0 = float3(unity_SHBr.z, unity_SHBg.z, unity_SHBb.z) / - 3.0;
		x0 -= L2_0;
		
		// Linear (L1) polynomial terms
		x1.r = dot(unity_SHAr.xyz, normal);
		x1.g = dot(unity_SHAg.xyz, normal);
		x1.b = dot(unity_SHAb.xyz, normal);
		
		// 4 of the quadratic (L2) polynomials
		float4 vB = normal.xyzz * normal.yzzx;
		x2.r = dot(unity_SHBr, vB);
		x2.g = dot(unity_SHBg, vB);
		x2.b = dot(unity_SHBb, vB);
		
		// Final (5th) quadratic (L2) polynomial
		float vC = normal.x * normal.x - normal.y * normal.y;
		x2 += unity_SHC.rgb * vC;
		// Move back the constant part of L(2,0)
		x2 += L2_0;
		
		return x0 * conv.x + x1 * conv.y + x2 * conv.z;
	}

	float3 GetSHDirectionL1()
	{
		// For efficiency, we only get the direction from L1.
		// Because getting it from L2 would be too hard!
		return Unity_SafeNormalize((unity_SHAr.xyz + unity_SHAg.xyz + unity_SHAb.xyz));
	}
	// Returns the value from SH in the lighting direction with the
	// brightest intensity.
	half3 GetSHMaxL1()
	{
		float3 maxDirection = GetSHDirectionL1();
		return ShadeSH9_wrapped(maxDirection, 0);
	}

	void applyShadeMapping(inout PoiFragData poiFragData, PoiMesh poiMesh, inout PoiLight poiLight)
	{
		float MainColorFeatherStep = _BaseColor_Step - _BaseShade_Feather;
		float firstColorFeatherStep = _ShadeColor_Step - _1st2nd_Shades_Feather;
		
		#if defined(PROP_1ST_SHADEMAP) || !defined(OPTIMIZER_ENABLED)
			float4 firstShadeMap = POI2D_SAMPLER_PAN(_1st_ShadeMap, _MainTex, poiUV(poiMesh.uv[_1st_ShadeMapUV], _1st_ShadeMap_ST), _1st_ShadeMapPan);
		#else
			float4 firstShadeMap = float4(1, 1, 1, 1);
		#endif
		firstShadeMap = lerp(firstShadeMap, float4(poiFragData.baseColor, 1), _Use_BaseAs1st);
		
		#if defined(PROP_2ND_SHADEMAP) || !defined(OPTIMIZER_ENABLED)
			float4 secondShadeMap = POI2D_SAMPLER_PAN(_2nd_ShadeMap, _MainTex, poiUV(poiMesh.uv[_2nd_ShadeMapUV], _2nd_ShadeMap_ST), _2nd_ShadeMapPan);
		#else
			float4 secondShadeMap = float4(1, 1, 1, 1);
		#endif
		secondShadeMap = lerp(secondShadeMap, firstShadeMap, _Use_1stAs2nd);
		
		firstShadeMap.rgb *= _1st_ShadeColor.rgb; //* lighColor
		secondShadeMap.rgb *= _2nd_ShadeColor.rgb; //* LightColor;
		
		float shadowMask = 1;
		shadowMask *= _Use_1stShadeMapAlpha_As_ShadowMask ?(_1stShadeMapMask_Inverse ?(1.0 - firstShadeMap.a) : firstShadeMap.a) : 1;
		shadowMask *= _Use_2ndShadeMapAlpha_As_ShadowMask ?(_2ndShadeMapMask_Inverse ?(1.0 - secondShadeMap.a) : secondShadeMap.a) : 1;
		
		float mainShadowMask = saturate(1 - ((poiLight.lightMap) - MainColorFeatherStep) / (_BaseColor_Step - MainColorFeatherStep) * (shadowMask));
		float firstSecondShadowMask = saturate(1 - ((poiLight.lightMap) - firstColorFeatherStep) / (_ShadeColor_Step - firstColorFeatherStep) * (shadowMask));
		
		mainShadowMask *= poiLight.shadowMask;
		firstSecondShadowMask *= poiLight.shadowMask;
		
		// 0 lerp | 1 multiply
		if (_ShadingShadeMapBlendType == 0)
		{
			poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, lerp(firstShadeMap.rgb, secondShadeMap.rgb, firstSecondShadowMask), mainShadowMask);
		}
		else
		{
			poiFragData.baseColor.rgb *= lerp(1, lerp(firstShadeMap.rgb, secondShadeMap.rgb, firstSecondShadowMask), mainShadowMask);
		}
		poiLight.rampedLightMap = 1-mainShadowMask;
	}

	void ApplySubtractiveLighting(inout UnityIndirect indirectLight)
	{
		#if SUBTRACTIVE_LIGHTING
			poiLight.attenuation = FadeShadows(lerp(1, poiLight.attenuation, _AttenuationMultiplier));
			
			float ndotl = saturate(dot(i.normal, _WorldSpaceLightPos0.xyz));
			float3 shadowedLightEstimate = ndotl * (1 - poiLight.attenuation) * _LightColor0.rgb;
			float3 subtractedLight = indirectLight.diffuse - shadowedLightEstimate;
			subtractedLight = max(subtractedLight, unity_ShadowColor.rgb);
			subtractedLight = lerp(subtractedLight, indirectLight.diffuse, _LightShadowData.x);
			indirectLight.diffuse = min(subtractedLight, indirectLight.diffuse);
		#endif
	}

	UnityIndirect CreateIndirectLight(in PoiMesh poiMesh, in PoiCam poiCam, in PoiLight poiLight)
	{
		UnityIndirect indirectLight;
		indirectLight.diffuse = 0;
		indirectLight.specular = 0;

		#if defined(LIGHTMAP_ON)
			indirectLight.diffuse = DecodeLightmap(UNITY_SAMPLE_TEX2D(unity_Lightmap, poiMesh.lightmapUV.xy));
			
			#if defined(DIRLIGHTMAP_COMBINED)
				float4 lightmapDirection = UNITY_SAMPLE_TEX2D_SAMPLER(
					unity_LightmapInd, unity_Lightmap, poiMesh.lightmapUV.xy
				);
				indirectLight.diffuse = DecodeDirectionalLightmap(
					indirectLight.diffuse, lightmapDirection, poiMesh.normals[1]
				);
			#endif
			ApplySubtractiveLighting(indirectLight);
		#endif
		
		#if defined(DYNAMICLIGHTMAP_ON)
			float3 dynamicLightDiffuse = DecodeRealtimeLightmap(
				UNITY_SAMPLE_TEX2D(unity_DynamicLightmap, poiMesh.lightmapUV.zw)
			);
			
			#if defined(DIRLIGHTMAP_COMBINED)
				float4 dynamicLightmapDirection = UNITY_SAMPLE_TEX2D_SAMPLER(
					unity_DynamicDirectionality, unity_DynamicLightmap,
					poiMesh.lightmapUV.zw
				);
				indirectLight.diffuse += DecodeDirectionalLightmap(
					dynamicLightDiffuse, dynamicLightmapDirection, poiMesh.normals[1]
				);
			#else
				indirectLight.diffuse += dynamicLightDiffuse;
			#endif
		#endif
		
		#if !defined(LIGHTMAP_ON) && !defined(DYNAMICLIGHTMAP_ON)
			#if UNITY_LIGHT_PROBE_PROXY_VOLUME
				if (unity_ProbeVolumeParams.x == 1)
				{
					indirectLight.diffuse = SHEvalLinearL0L1_SampleProbeVolume(
						float4(poiMesh.normals[1], 1), poiMesh.worldPos
					);
					indirectLight.diffuse = max(0, indirectLight.diffuse);
					#if defined(UNITY_COLORSPACE_GAMMA)
						indirectLight.diffuse = LinearToGammaSpace(indirectLight.diffuse);
					#endif
				}
				else
				{
					indirectLight.diffuse += max(0, ShadeSH9(float4(poiMesh.normals[1], 1)));
				}
			#else
				indirectLight.diffuse += max(0, ShadeSH9(float4(poiMesh.normals[1], 1)));
			#endif
		#endif
		
		float3 reflectionDir = reflect(-poiCam.viewDir, poiMesh.normals[1]);
		Unity_GlossyEnvironmentData envData;
		envData.roughness = 1 - _LightingStandardSmoothness;
		envData.reflUVW = BoxProjection(
			reflectionDir, poiMesh.worldPos.xyz,
			unity_SpecCube0_ProbePosition,
			unity_SpecCube0_BoxMin.xyz, unity_SpecCube0_BoxMax.xyz
		);
		float3 probe0 = Unity_GlossyEnvironment(
			UNITY_PASS_TEXCUBE(unity_SpecCube0), unity_SpecCube0_HDR, envData
		);
		envData.reflUVW = BoxProjection(
			reflectionDir, poiMesh.worldPos.xyz,
			unity_SpecCube1_ProbePosition,
			unity_SpecCube1_BoxMin.xyz, unity_SpecCube1_BoxMax.xyz
		);
		#if UNITY_SPECCUBE_BLENDING
			float interpolator = unity_SpecCube0_BoxMin.w;
			//UNITY_BRANCH
			if (interpolator < 0.99999)
			{
				float3 probe1 = Unity_GlossyEnvironment(
					UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1, unity_SpecCube0),
					unity_SpecCube0_HDR, envData
				);
				indirectLight.specular = lerp(probe1, probe0, interpolator);
			}
			else
			{
				indirectLight.specular = probe0;
			}
		#else
			indirectLight.specular = probe0;
		#endif

		indirectLight.diffuse *= poiLight.occlusion;
		indirectLight.specular *= poiLight.occlusion;
		
		return indirectLight;
	}

	void calculateShading(inout PoiLight poiLight, inout PoiFragData poiFragData, in PoiMesh poiMesh, in PoiCam poiCam)
	{
		#ifdef UNITY_PASS_FORWARDBASE
			
			float shadowStrength = _ShadowStrength * poiLight.shadowMask;

			#ifdef POI_PASS_OUTLINE
				shadowStrength = lerp(0, shadowStrength, _OutlineShadowStrength);
			#endif

			#ifdef _LIGHTINGMODE_FLAT
				poiLight.finalLighting = poiLight.directColor;
				poiLight.rampedLightMap = poiLight.nDotLSaturated;
			#endif

			#ifdef _LIGHTINGMODE_TEXTURERAMP
				poiLight.rampedLightMap = lerp(1, UNITY_SAMPLE_TEX2D(_ToonRamp, poiLight.lightMap + _ShadowOffset).rgb, shadowStrength);
				poiLight.finalLighting = lerp(_LightingShadowColor * lerp(poiLight.indirectColor, poiLight.rampedLightMap * poiLight.directColor, _LightingIgnoreAmbientColor) * poiLight.occlusion, poiLight.directColor, poiLight.rampedLightMap);
			#endif

			#ifdef _LIGHTINGMODE_MATHRAMP
				poiLight.rampedLightMap = saturate((poiLight.lightMap - _LightingGradientStart) / saturate(_LightingGradientEnd - _LightingGradientStart + fwidth(poiLight.lightMap)));
				
				poiLight.finalLighting = lerp((_LightingShadowColor * lerp(poiLight.indirectColor, poiLight.directColor, _LightingIgnoreAmbientColor) * poiLight.occlusion), (poiLight.directColor), saturate(poiLight.rampedLightMap + 1 - shadowStrength));
			#endif

			#ifdef _LIGHTINGMODE_SHADEMAP
				poiLight.finalLighting = poiLight.directColor;
			#endif

			#ifdef _LIGHTINGMODE_REALISTIC
				UnityLight light;
				light.dir = poiLight.direction;
				light.color = saturate(_LightColor0.rgb * lerp(1, poiLight.attenuation, poiLight.attenuationStrength) * poiLight.detailShadow);
				light.ndotl = poiLight.nDotLSaturated;
				poiLight.rampedLightMap = poiLight.nDotLSaturated;
				poiLight.finalLighting = UNITY_BRDF_PBS(1, 0, 0, _LightingStandardSmoothness, poiMesh.normals[1], poiCam.viewDir, light, CreateIndirectLight(poiMesh, poiCam, poiLight)).xyz;
			#endif

			#ifdef _LIGHTINGMODE_WRAPPED
				#define grayscale_vector float3(0.3,0.59,0.11)
				float wrap = _LightingWrappedWrap;
				float3 directcolor = (_LightColor0.rgb) * saturate(RTWrapFunc(poiLight.nDotL, wrap, _LightingWrappedNormalization));
				float directatten = poiLight.attenuation;
				float3 envlight = ShadeSH9_wrapped(poiMesh.normals[1], wrap);
				envlight *= poiLight.occlusion;
				
				poiLight.directColor = directcolor * poiLight.detailShadow * directatten;
				poiLight.indirectColor = envlight;
				
				float3 ShadeSH9Plus_2 = GetSHMaxL1();
				float bw_topDirectLighting_2 = dot(_LightColor0.rgb, grayscale_vector);
				float bw_directLighting = dot(poiLight.directColor, grayscale_vector);
				float bw_indirectLighting = dot(poiLight.indirectColor, grayscale_vector);
				float bw_topIndirectLighting = dot(ShadeSH9Plus_2, grayscale_vector);
				
				poiLight.lightMap = smoothstep(0, bw_topIndirectLighting + bw_topDirectLighting_2, bw_indirectLighting + bw_directLighting);
				poiLight.rampedLightMap = saturate((poiLight.lightMap - _LightingGradientStart) / saturate(_LightingGradientEnd - _LightingGradientStart + fwidth(poiLight.lightMap)));
				// poiLight.rampedLightMap = 1;
				// UNITY_BRANCH
				// if (_LightingRampType == 0) // Ramp Texture
				// {
				// 	poiLight.rampedLightMap = lerp(1, UNITY_SAMPLE_TEX2D(_ToonRamp, poiLight.lightMap + _ShadowOffset).rgb, shadowStrength.r);
				// }
				// else if (_LightingRampType == 1) // Math Gradient
				// {
					poiLight.rampedLightMap = lerp(_LightingShadowColor * lerp(poiLight.indirectColor, 1, _LightingIgnoreAmbientColor), float3(1, 1, 1), saturate(1 - smoothstep(_LightingGradientStartWrap - .000001, _LightingGradientEndWrap, 1 - poiLight.lightMap)));
					poiLight.rampedLightMap = lerp(float3(1, 1, 1), poiLight.rampedLightMap, shadowStrength.r);
				// }
				
				poiLight.finalLighting = (poiLight.indirectColor + poiLight.directColor) * saturate(poiLight.rampedLightMap + 1 - _ShadowStrength);
			#endif

			#ifdef _LIGHTINGMODE_SKIN
				float3 ambientNormalWorld = poiMesh.normals[1];//aTangentToWorld(s, s.blurredNormalTangent);
				poiLight.rampedLightMap = poiLight.nDotLSaturated;
				// Scattering mask.
				float subsurface = 1;
				float skinScattering = saturate(subsurface * _SssScale * 2);
				
				// Skin subsurface depth absorption tint.
				// cf http://www.crytek.com/download/2014_03_25_CRYENGINE_GDC_Schultz.pdf pg 35
				half3 absorption = exp((1.0h - subsurface) * _SssTransmissionAbsorption.rgb);
				
				// Albedo scale for absorption assumes ~0.5 luminance for Caucasian skin.
				absorption *= saturate(poiFragData.baseColor * unity_ColorSpaceDouble.rgb);
				
				// Blurred normals for indirect diffuse and direct scattering.
				ambientNormalWorld = normalize(lerp(poiMesh.normals[1], ambientNormalWorld, _SssBumpBlur));
				
				float ndlBlur = dot(poiMesh.normals[1], poiLight.direction) * 0.5h + 0.5h;
				float lumi = dot(poiLight.directColor, half3(0.2126h, 0.7152h, 0.0722h));
				float4 sssLookupUv = float4(ndlBlur, skinScattering * lumi, 0.0f, 0.0f);
				half3 sss = poiLight.lightMap * poiLight.attenuation * tex2Dlod(_SkinLUT, sssLookupUv).rgb;
				poiLight.finalLighting = min(lerp(poiLight.indirectColor * _LightingShadowColor, _LightingShadowColor, _LightingIgnoreAmbientColor) + (sss * poiLight.directColor), poiLight.directColor);
			#endif

		#endif

		#ifdef UNITY_PASS_FORWARDADD
			//UNITY_BRANCH
			if (_LightingAdditiveType == 0) // Realistic

			{
				poiLight.finalLighting = poiLight.directColor * poiLight.attenuation * max(0, poiLight.nDotL) * poiLight.detailShadow * poiLight.additiveShadow;
			}
			else if (_LightingAdditiveType == 1) // Toon

			{
				#if defined(POINT) || defined(SPOT)
					poiLight.finalLighting = lerp(poiLight.directColor * max(poiLight.additiveShadow, _LightingAdditivePassthrough), poiLight.indirectColor, smoothstep(_LightingAdditiveGradientStart, _LightingAdditiveGradientEnd, 1 - (.5 * poiLight.nDotL + .5))) * poiLight.attenuation * poiLight.detailShadow;
				#else
					poiLight.finalLighting = lerp(poiLight.directColor * max(poiLight.attenuation, _LightingAdditivePassthrough), poiLight.indirectColor, smoothstep(_LightingAdditiveGradientStart, _LightingAdditiveGradientEnd, 1 - (.5 * poiLight.nDotL + .5))) * poiLight.detailShadow;
				#endif
			}
			/*
			else //if(_LightingAdditiveType == 2) // Wrapped
			{
				float uv = saturate(RTWrapFunc(poiLight.nDotL, _LightingWrappedWrap, _LightingWrappedNormalization)) * detailShadow;
				
				poiLight.rampedLightMap = 1;
				//UNITY_BRANCH
				if (_LightingRampType == 1) // Math Gradient
				poiLight.rampedLightMap = lerp(_LightingShadowColor, float3(1, 1, 1), saturate(1 - smoothstep(_LightingGradientStart - .000001, _LightingGradientEnd, 1 - uv)));
				// TODO: ramp texture or full shade/tint map for atlasing
				//poiLight.rampedLightMap = lerp(1, UNITY_SAMPLE_TEX2D(_ToonRamp, float2(uv + _ShadowOffset, 1)), shadowStrength.r);
				
				float shadowatten = max(poiLight.additiveShadow, _LightingAdditivePassthrough);
				return poiLight.color * poiLight.rampedLightMap * saturate(poiLight.attenuation * uv * shadowatten);
			}
			*/
		#endif

		#if defined(VERTEXLIGHT_ON) && defined(POI_VERTEXLIGHT_ON)
			float3 vertexLighting = float3(0, 0, 0);
			for (int index = 0; index < 4; index++)
			{
				//UNITY_BRANCH
				if (_LightingAdditiveType == 0)
				{
					vertexLighting += poiLight.vColor[index] * poiLight.vAttenuationDotNL[index] * poiLight.detailShadow; // Realistic

				}

				//UNITY_BRANCH
				if (_LightingAdditiveType == 1) // Toon

				{
					vertexLighting += lerp(poiLight.vColor[index] * poiLight.vAttenuation[index], poiLight.vColor[index] * _LightingAdditivePassthrough * poiLight.vAttenuation[index], smoothstep(_LightingAdditiveGradientStart, _LightingAdditiveGradientEnd, poiLight.vDotNL[index])) * poiLight.detailShadow;
				}
				
				//UNITY_BRANCH
				if (_LightingAdditiveType == 2) //if(_LightingAdditiveType == 2) // Wrapped

				{
					//TODO wrapped vertex lighting
					vertexLighting += lerp(poiLight.vColor[index] * poiLight.vAttenuation[index], poiLight.vColor[index] * _LightingAdditivePassthrough * poiLight.vAttenuation[index], smoothstep(_LightingAdditiveGradientStart, _LightingAdditiveGradientEnd, poiLight.vDotNL[index])) * poiLight.detailShadow;
					/*
					float uv = saturate(RTWrapFunc(-poiLight.vDotNL[index], _LightingWrappedWrap, _LightingWrappedNormalization)) * poiLight.detailShadow;
					
					poiLight.rampedLightMap = 1;
					if (_LightingRampType == 1) // Math Gradient
					poiLight.rampedLightMap = lerp(_LightingShadowColor, float3(1, 1, 1), saturate(1 - smoothstep(_LightingGradientStart - .000001, _LightingGradientEnd, 1 - uv)));
					
					vertexLighting += poiLight.vColor[index] * poiLight.rampedLightMap * saturate(poiLight.vAttenuation[index] * uv);
					*/
				}
			}
			float3 mixedLight = poiLight.finalLighting;
			poiLight.finalLighting = vertexLighting + poiLight.finalLighting;
		#endif
	}
#endif

#T#PoiCalculateShadingFunctionCall
#ifdef VIGNETTE_MASKED
	#ifdef POI_PASS_OUTLINE
		//UNITY_BRANCH
		if (_OutlineLit)
		{
			calculateShading(poiLight, poiFragData, poiMesh, poiCam);
		}
		else
		{
			poiLight.finalLighting = 1;
		}
	#else
		calculateShading(poiLight, poiFragData, poiMesh, poiCam);
	#endif
#else
	poiLight.finalLighting = 1;
	poiLight.rampedLightMap = aaBlurStep(poiLight.nDotL, 0.1, .1);
#endif

#T#PoiShadeMapFunctionCall
#if defined(_LIGHTINGMODE_SHADEMAP) && defined(VIGNETTE_MASKED)
	applyShadeMapping(poiFragData, poiMesh, poiLight);
#endif

#T#PoiApplyShadingFunctionCall
poiFragData.finalColor = poiFragData.baseColor * poiLight.finalLighting;