#T#PoiMetallicsAndSpecularProperties

[HideInInspector] m_start_brdf(" Reflections & Specular--{reference_property:_MochieBRDF}", Float) = 0
[HideInInspector][ThryToggle(VIGNETTE_CLASSIC)]_MochieBRDF("Enable", Float) = 0

_MochieReflectionStrength("Reflections", Range(0,1)) = 1
_MochieSpecularStrength("Specular", Range(0,1)) = 1
_MochieMetallicMultiplier("Metallic", Range(0,1)) = 0
_MochieRoughnessMultiplier("Roughness", Range(0,1)) = 1
_MochieReflectionTint("Reflection Tint", Color) = (1,1,1,1)
_MochieSpecularTint("Specular Tint", Color) = (1,1,1,1)

_MochieMetallicMap("Metallic Map--{reference_properties:[_MochieMetallicMapPan, _MochieMetallicMapUV, _MochieMetallicMapToolTip]}", 2D) = "white" { }
[HideInInspector][Helpbox(1)]_MochieMetallicMapToolTip("(B)", Int) = 0
[HideInInspector][Vector2]_MochieMetallicMapPan("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_MochieMetallicMapUV("UV", Int) = 0

_MochieRoughnessMap("Roughness Map--{reference_properties:[_MochieRoughnessMapPan, _MochieRoughnessMapUV, _MochieRoughnessMapToolTip]}", 2D) = "white" { }
[HideInInspector][Helpbox(1)]_MochieRoughnessMapToolTip("(G)", Int) = 0
[HideInInspector][Vector2]_MochieRoughnessMapPan("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_MochieRoughnessMapUV("UV", Int) = 0

_MochieReflectionMask("Reflection Mask--{reference_properties:[_MochieReflectionMaskPan, _MochieReflectionMaskUV, _MochieReflectionMaskToolTip]}", 2D) = "white" { }
[HideInInspector][Helpbox(1)]_MochieReflectionMaskToolTip("(R)", Int) = 0
[HideInInspector][Vector2]_MochieReflectionMaskPan("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_MochieReflectionMaskUV("UV", Int) = 0

_MochieSpecularMask("Specular Mask--{reference_properties:[_MochieSpecularMaskPan, _MochieSpecularMaskUV, _MochieSpecularMaskToolTip]}", 2D) = "white" { }
[HideInInspector][Helpbox(1)]_MochieSpecularMaskToolTip("(R)", Int) = 0
[HideInInspector][Vector2]_MochieSpecularMaskPan("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_MochieSpecularMaskUV("UV", Int) = 0

[NoScaleOffset]_MochieReflCube("Fallback Cubemap", Cube) = "" {} 

[HideInInspector] m_end_brdf("", Float) = 0


#T#PoiMetallicsAndSpecularKeywords
#pragma shader_feature VIGNETTE_CLASSIC

#T#PoiMetallicsAndSpecularVariables

#ifdef VIGNETTE_CLASSIC
	#if defined(PROP_MOCHIEMETALLICMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _MochieMetallicMap;
		float4 _MochieMetallicMap_ST;
		float2 _MochieMetallicMapPan;
		int _MochieMetallicMapUV;
	#endif

	#if defined(PROP_MOCHIEROUGHNESSMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _MochieRoughnessMap;
		float4 _MochieRoughnessMap_ST;
		float2 _MochieRoughnessMapPan;
		int _MochieRoughnessMapUV;
	#endif

	#if defined(PROP_MOCHIEREFLECTIONMASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _MochieReflectionMask;
		float4 _MochieReflectionMask_ST;
		float2 _MochieReflectionMaskPan;
		int _MochieReflectionMaskUV;
	#endif

	#if defined(PROP_MOCHIESPECULARMASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _MochieSpecularMask;
		float4 _MochieSpecularMask_ST;
		float2 _MochieSpecularMaskPan;
		int _MochieSpecularMaskUV;
	#endif

	float _MochieRoughnessMultiplier;
	float _MochieMetallicMultiplier;
	float _MochieReflectionStrength;
	float _MochieSpecularStrength;
	float4 _MochieSpecularTint;
	float4 _MochieReflectionTint;

	samplerCUBE _MochieReflCube;
	float4 _MochieReflCube_HDR;
#endif

#T#PoiMetallicsAndSpecularFunction
#ifdef VIGNETTE_CLASSIC

bool SceneHasReflections(){
	float width, height;
	unity_SpecCube0.GetDimensions(width, height);
	return !(width * height < 2);
}

float3 GetWorldReflections(float3 reflDir, float3 worldPos, float roughness){
    float3 baseReflDir = reflDir;
    reflDir = BoxProjection(reflDir, worldPos, unity_SpecCube0_ProbePosition, unity_SpecCube0_BoxMin, unity_SpecCube0_BoxMax);
    float4 envSample0 = UNITY_SAMPLE_TEXCUBE_LOD(unity_SpecCube0, reflDir, roughness * UNITY_SPECCUBE_LOD_STEPS);
    float3 p0 = DecodeHDR(envSample0, unity_SpecCube0_HDR);
    float interpolator = unity_SpecCube0_BoxMin.w;
    UNITY_BRANCH
    if (interpolator < 0.99999){
        float3 refDirBlend = BoxProjection(baseReflDir, worldPos, unity_SpecCube1_ProbePosition, unity_SpecCube1_BoxMin, unity_SpecCube1_BoxMax);
        float4 envSample1 = UNITY_SAMPLE_TEXCUBE_SAMPLER_LOD(unity_SpecCube1, unity_SpecCube0, refDirBlend, roughness * UNITY_SPECCUBE_LOD_STEPS);
        float3 p1 = DecodeHDR(envSample1, unity_SpecCube1_HDR);
        p0 = lerp(p1, p0, interpolator);
    }
    return p0;
}

float3 GetReflections(in PoiCam pc, in PoiLight pl, in PoiMesh pm, float roughness){
    float3 reflections = 0;
	UNITY_BRANCH
	if (SceneHasReflections()){
		reflections = GetWorldReflections(pc.reflectionDir, pm.worldPos.xyz, roughness);
	}
	else {
		reflections = texCUBElod(_MochieReflCube, float4(pc.reflectionDir, roughness * UNITY_SPECCUBE_LOD_STEPS));
		reflections = DecodeHDR(float4(reflections,1), _MochieReflCube_HDR);
	}
	reflections *= pl.occlusion;
    return reflections;
}

float GetGGXTerm(in PoiLight pl, float roughness){
	float visibilityTerm = 0;
	if (pl.nDotL > 0){
		float rough = roughness;
		float rough2 = roughness * roughness;

		float lambdaV = pl.nDotL * (pl.nDotV * (1 - rough) + rough);
		float lambdaL = pl.nDotV * (pl.nDotL * (1 - rough) + rough);

		visibilityTerm = 0.5f / (lambdaV + lambdaL + 1e-5f);
		float d = (pl.nDotH * rough2 - pl.nDotH) * pl.nDotH + 1.0f;
		float dotTerm = UNITY_INV_PI * rough2 / (d * d + 1e-7f);

		visibilityTerm *= dotTerm * UNITY_PI;
	}
	return visibilityTerm;
}

void GetSpecFresTerm(in PoiLight pl, inout float3 specularTerm, inout float3 fresnelTerm, float3 specCol, float roughness){
	specularTerm = GetGGXTerm(pl, roughness); 
	fresnelTerm = FresnelTerm(specCol, pl.lDotH);
	specularTerm = max(0, specularTerm * max(0.00001, pl.nDotL));
}

float GetRoughness(float smoothness){
	float rough = 1-smoothness;
    rough *= 1.7-0.7*rough;
    return rough;
}

void MochieBRDF(inout PoiFragData pfd, in PoiCam pc, in PoiLight pl, in PoiMesh pm){

	float smoothness = 1-(POI2D_SAMPLER_PAN(_MochieRoughnessMap, _MainTex, poiUV(pm.uv[_MochieRoughnessMapUV], _MochieRoughnessMap_ST), _MochieRoughnessMapPan) * _MochieRoughnessMultiplier);
	float roughness = GetRoughness(smoothness);
	float metallic = POI2D_SAMPLER_PAN(_MochieMetallicMap, _MainTex, poiUV(pm.uv[_MochieMetallicMapUV], _MochieMetallicMap_ST), _MochieMetallicMapPan) * _MochieMetallicMultiplier;
	float3 specCol = lerp(unity_ColorSpaceDielectricSpec.rgb, pfd.baseColor, metallic);
	float omr = unity_ColorSpaceDielectricSpec.a - metallic * unity_ColorSpaceDielectricSpec.a;
	float percepRough = 1-smoothness;
	float brdfRoughness = percepRough * percepRough;
	brdfRoughness = max(brdfRoughness, 0.002);
	
	float3 lighting = pl.finalLighting;
	float3 diffuse = pfd.baseColor;
	float3 specular = 0;
	float3 reflections = 0;
	float3 environment = 0;

	// Specular
	if (_MochieSpecularStrength > 0){
		float3 fresnelTerm = 1;
		float3 specularTerm = 1;
		float specularMask = POI2D_SAMPLER_PAN(_MochieSpecularMask, _MainTex, poiUV(pm.uv[_MochieSpecularMaskUV], _MochieSpecularMask_ST), _MochieSpecularMaskPan);
		GetSpecFresTerm(pl, specularTerm, fresnelTerm, specCol, brdfRoughness);
		specular = lighting * specularTerm * fresnelTerm * specularMask * _MochieSpecularTint * pl.occlusion * pl.attenuation * _MochieSpecularStrength;
	}

	// Reflections
	if (_MochieReflectionStrength > 0){
		float reflectionMask = POI2D_SAMPLER_PAN(_MochieReflectionMask, _MainTex, poiUV(pm.uv[_MochieReflectionMaskUV], _MochieReflectionMask_ST), _MochieReflectionMaskPan);
		float surfaceReduction = (1.0 / (brdfRoughness*brdfRoughness + 1.0));
		float grazingTerm = saturate(smoothness + (1-omr));
		float3 reflCol = GetReflections(pc, pl, pm, roughness);
		float reflStr = reflectionMask * _MochieReflectionStrength;
		reflections = surfaceReduction * reflCol * FresnelLerp(specCol, grazingTerm, pl.nDotV);
		reflections *= _MochieReflectionTint * reflStr;
		#ifdef UNITY_PASS_FORWARDADD
			reflections *= pl.attenuation;
		#endif
		diffuse = lerp(diffuse, diffuse*omr, reflStr);
	}

	environment = specular + reflections; 
	diffuse *= lighting;
	diffuse += environment;
	pfd.finalColor = diffuse;
}

#endif

#T#PoiMetallicsAndSpecularFunctionCall
#if defined(VIGNETTE_CLASSIC)
    MochieBRDF(poiFragData, poiCam, poiLight, poiMesh);
#endif